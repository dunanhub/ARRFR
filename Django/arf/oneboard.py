import os
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "arf.settings")
django.setup()

import asyncio
import os
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import openai
import logging
from crm.models import TelegramUser
from asgiref.sync import sync_to_async
from django.db.models import F
import aiohttp
from urllib.parse import urljoin

# –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏
QUIZ_EMOJIS = {
    '–§–∏–Ω–∞–Ω—Å—ã': 'üí∞', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã': 'ü™ô', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': 'üìà',
    '–°—Ç–∞—Ä—Ç–∞–ø—ã': 'üöÄ', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'üíª', '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': 'üîí',
    '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç': 'ü§ñ', '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥': 'üìä', '–ë–∏–∑–Ω–µ—Å': 'üíº',
    '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'üìö'
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token='7765118538:AAG49D3GDvScy7STLhR8K3MLDN6BH82yZ2w')
dp = Dispatcher()
router = Router()
openai.api_key = 'sk-UkToPz3yyjVqry2VCPEAUunSk0qZJW-QsDoCnEmXYvT3BlbkFJyGc2ynM2u4Ow3yvD1REKZ2rph9bM7gceVDNpf7YZ4A'
logging.basicConfig(level=logging.INFO)
# ID –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
TARGET_GROUP_ID = '-1002215685628'

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    choosing_input_method = State()
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_region = State()
    waiting_for_marital_status = State()
    waiting_for_children = State()
    waiting_for_benefits = State()
    waiting_for_name = State()
    waiting_for_full_text = State()
    quiz_topic_selection = State()
    quiz_question = State()
    editing_field = State()
    waiting_for_user_search = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
gender_kb = ReplyKeyboardMarkup(
    keyboard=[  
        [KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]
    ],
    resize_keyboard=True
)

marital_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–•–æ–ª–æ—Å—Ç/–ù–µ –∑–∞–º—É–∂–µ–º"), KeyboardButton(text="–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º")],
        [KeyboardButton(text="–í —Ä–∞–∑–≤–æ–¥–µ"), KeyboardButton(text="–í–¥–æ–≤–µ—Ü/–í–¥–æ–≤–∞")]
    ],
    resize_keyboard=True
)

benefits_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]
    ],
    resize_keyboard=True
)

input_method_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥")],
        [KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –≤—Å—ë —Å—Ä–∞–∑—É")]
    ],
    resize_keyboard=True
)

# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
KAZAKHSTAN_CITIES = [
    "–ê–ª–º–∞—Ç—ã", "–ê—Å—Ç–∞–Ω–∞", "–®—ã–º–∫–µ–Ω—Ç", "–ê–∫—Ç–æ–±–µ", "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", 
    "–¢–∞—Ä–∞–∑", "–ü–∞–≤–ª–æ–¥–∞—Ä", "–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫", "–°–µ–º–µ–π", 
    "–ê—Ç—ã—Ä–∞—É", "–ö–æ—Å—Ç–∞–Ω–∞–π", "–ö—ã–∑—ã–ª–æ—Ä–¥–∞", "–£—Ä–∞–ª—å—Å–∫", 
    "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫", "–ê–∫—Ç–∞—É", "–¢–µ–º–∏—Ä—Ç–∞—É", "–¢—É—Ä–∫–µ—Å—Ç–∞–Ω", 
    "–ö–æ–∫—à–µ—Ç–∞—É", "–¢–∞–ª–¥—ã–∫–æ—Ä–≥–∞–Ω", "–≠–∫–∏–±–∞—Å—Ç—É–∑"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–æ—Ä–æ–¥–≤
cities_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=city)] for city in KAZAKHSTAN_CITIES
    ],
    resize_keyboard=True
)

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
functions_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–§–∏–∞–Ω—Å—ã"), KeyboardButton(text="–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"), KeyboardButton(text="–ò–Ω–≤–µ—Å—Ç–∏–∏–∏")],
        [KeyboardButton(text="–°—Ç–∞—Ä—Ç–∞–ø—ã"), KeyboardButton(text="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"), KeyboardButton(text="–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")],
        [KeyboardButton(text="–ò–ò"), KeyboardButton(text="–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"), KeyboardButton(text="–ë–∏–∑–Ω–µ—Å")],
        [KeyboardButton(text="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"), KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è"), KeyboardButton(text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")],
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
profile_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="profile:edit")],
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="profile:menu")]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
edit_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–§–ò–û", callback_data="edit:full_name")],
        [InlineKeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç", callback_data="edit:age")],
        [InlineKeyboardButton(text="–†–µ–≥–∏–æ–Ω", callback_data="edit:region")],
        [InlineKeyboardButton(text="–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ", callback_data="edit:marital_status")],
        [InlineKeyboardButton(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π", callback_data="edit:children")],
        [InlineKeyboardButton(text="–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å–æ–±–∏—è", callback_data="edit:benefits")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="edit:back")]
    ]
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î
@sync_to_async
def save_user_request_sync(user_id: int, username: str, function_name: str):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = TelegramUser.objects.get_or_create(
            user_id=user_id,
            defaults={'username': username, 'used_functions': []}
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if user.username != username and username is not None:
            user.username = username
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
        current_functions = user.used_functions if isinstance(user.used_functions, list) else []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ—ë —Ç–∞–º –µ—â—ë –Ω–µ—Ç
        if function_name not in current_functions:
            current_functions.append(function_name)
            user.used_functions = current_functions
            user.save()
        
    except Exception as e:
        logging.error(f"Error saving user request: {e}")
        raise  # –î–æ–±–∞–≤–ª—è–µ–º raise –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
async def save_user_request(user_id: int, username: str, function_name: str):
    await save_user_request_sync(user_id, username, function_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–Ω
        user = await sync_to_async(TelegramUser.objects.filter(user_id=message.from_user.id).first)()
        
        if user and user.is_registered:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ñ—É–Ω–∫—Ü–∏–π
            await message.reply(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:",
                reply_markup=functions_kb
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await sync_to_async(TelegramUser.objects.create)(
                    user_id=message.from_user.id,
                    username=message.from_user.username
                )
            
            await state.set_state(Form.choosing_input_method)
            await message.reply(
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:",
                reply_markup=input_method_kb
            )
    except Exception as e:
        logging.error(f"Error in start command: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –≤–≤–æ–¥–∞
@router.message(Form.choosing_input_method)
async def process_input_method(message: types.Message, state: FSMContext):
    if message.text == "–ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥":
        await state.set_state(Form.waiting_for_name)
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            reply_markup=ReplyKeyboardRemove()
        )
    elif message.text == "–í–≤–µ—Å—Ç–∏ –≤—Å—ë —Å—Ä–∞–∑—É":
        await state.set_state(Form.waiting_for_full_text)
        await message.reply(
            "–ü–æ–∂–∞–ª—É—Å—Ç–∞, –≤–µ–¥–∏—Ç–µ —é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
            "–§–ò–û, –ø–æ–ª, –æ–∑—Ä–∞—Å—Ç, —Ä–µ–≥–∏–æ–Ω, —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π, "
            "–Ω–∞–ª–∏—á–∏–µ —Å–æ—Ü. –ø–æ—Å–æ–∏–π.",
            reply_markup=ReplyKeyboardRemove()
        )

# –ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
@router.message(Form.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.waiting_for_gender)
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_kb)

@router.message(Form.waiting_for_gender)
async def process_gender(message: types.Message, state: FSMContext):
    if message.text not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–ø–æ–ª—å—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞.")
        return
    await state.update_data(gender=message.text)
    await state.set_state(Form.waiting_for_age)
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=ReplyKeyboardRemove())

@router.message(Form.waiting_for_age)
async def process_age(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–æ
    if not message.text.isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    
    age = int(message.text)
    # –ü—Ä–æ–≤–µ—Ä—è–µ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞
    if age < 0 or age > 120:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 0 –¥–æ 120 –ª–µ—Ç).")
        return

    await state.update_data(age=message.text)
    await state.set_state(Form.waiting_for_region)
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:", reply_markup=cities_kb)

@router.message(Form.waiting_for_region)
async def process_region(message: types.Message, state: FSMContext):
    if message.text not in KAZAKHSTAN_CITIES:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=cities_kb)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏–æ–Ω
    user_data = await state.get_data()
    user_data['region'] = message.text
    await state.update_data(region=message.text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    await check_next_step(state, message)

@router.message(Form.waiting_for_marital_status)
async def process_marital(message: types.Message, state: FSMContext):
    valid_statuses = ["–•–æ–ª–æ—Å—Ç/–ù–µ –∑–∞–º—É–∂–µ–º", "–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º", "–í —Ä–∞–∑–≤–æ–¥–µ", "–í–¥–æ–≤–µ—Ü/–í–¥–æ–≤–∞"]
    if message.text not in valid_statuses:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:", reply_markup=marital_kb)
        return
    await state.update_data(marital_status=message.text)
    await state.set_state(Form.waiting_for_children)
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:", reply_markup=ReplyKeyboardRemove())

@router.message(Form.waiting_for_children)
async def process_children(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    
    children = int(message.text)
    if children < 0:
        await message.reply("–ö–æ–ª—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
        return

    await state.update_data(children=message.text)
    await state.set_state(Form.waiting_for_benefits)
    await message.reply("–ü–æ–ª—É—á–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å–æ–±–∏—è?", reply_markup=benefits_kb)

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@sync_to_async
def save_user_data_sync(user_id: int, user_data: dict):
    try:
        user = TelegramUser.objects.get(user_id=user_id)
        user.full_name = user_data.get('name')
        user.gender = user_data.get('gender')
        user.age = user_data.get('age')
        user.region = user_data.get('region')
        user.marital_status = user_data.get('marital_status')
        user.children = user_data.get('children')
        user.benefits = user_data.get('benefits')
        user.is_registered = True
        user.save()
        return True
    except Exception as e:
        logging.error(f"Error saving user data: {e}")
        return False

# –û–±–Ω–æ–≤–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ benefits
@router.message(Form.waiting_for_benefits)
async def process_benefits(message: types.Message, state: FSMContext):
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        await message.reply("–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.", reply_markup=benefits_kb)
        return
    
    user_data = await state.get_data()
    user_data['benefits'] = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    missing_fields = []
    if not user_data.get('name'): missing_fields.append('–§–ò–û')
    if not user_data.get('gender'): missing_fields.append('–ø–æ–ª')
    if not user_data.get('age'): missing_fields.append('–≤–æ–∑—Ä–∞—Å—Ç')
    if not user_data.get('region'): missing_fields.append('—Ä–µ–≥–∏–æ–Ω')
    if not user_data.get('marital_status'): missing_fields.append('—Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ')
    if not user_data.get('children'): missing_fields.append('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π')
    if not user_data.get('benefits'): missing_fields.append('–∏–Ω–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ—Å–æ–±–∏—è—Ö')
    
    if missing_fields:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        first_missing = missing_fields[0]
        keyboard = None
        prompt = f"–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö: {first_missing}. "
        
        if first_missing == '–ø–æ–ª':
            keyboard = gender_kb
            prompt += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:"
            await state.set_state(Form.waiting_for_gender)
        elif first_missing == '–≤–æ–∑—Ä–∞—Å—Ç':
            prompt += "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:"
            await state.set_state(Form.waiting_for_age)
        elif first_missing == '—Ä–µ–≥–∏–æ–Ω':
            keyboard = cities_kb
            prompt += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:"
            await state.set_state(Form.waiting_for_region)
        elif first_missing == '—Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ':
            keyboard = marital_kb
            prompt += "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–µ–Ω–∏–µ:"
            await state.set_state(Form.waiting_for_marital_status)
        elif first_missing == '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π':
            prompt += "–£–∫–∞–∂–∏—Ç–µ –æ–ª–∏—á–µ—Å–≤–æ –¥–µ—Ç–µ–π:"
            await state.set_state(Form.waiting_for_children)
        elif first_missing == '–§–ò–û':
            prompt += "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
            await state.set_state(Form.waiting_for_name)
        elif first_missing == '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ—Å–æ–±–∏—è—Ö':
            keyboard = benefits_kb
            prompt += "–æ–ª—É—á–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å–æ–±–∏—è?"
            await state.set_state(Form.waiting_for_benefits)
        
        await message.reply(prompt, reply_markup=keyboard)
        return
    
    # –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –±–∞–∑—É
    save_success = await save_user_data_sync(message.from_user.id, user_data)
    
    if not save_success:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    formatted_message = (
        f"üìã –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\n"
        f"üë§ –§–ò–û: {user_data['name']}\n"
        f" –ü–æ–ª: {user_data['gender']}\n"
        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
        f"üåç –†–µ–≥–∏–æ–Ω: {user_data['region']}\n"
        f"üíë –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {user_data['marital_status']}\n"
        f"üë∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π: {user_data['children']}\n"
        f"üì¶ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å–æ–±–∏—è: {user_data['benefits']}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    await bot.send_message(TARGET_GROUP_ID, formatted_message)
    await message.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=functions_kb)
    await state.clear()

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å GPT
@router.message(Form.waiting_for_full_text)
async def process_full_text(message: types.Message, state: FSMContext):
    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": """
                    –ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤–µ—Ä–Ω–∏ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
                    {
                        "name": "–∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –§–ò–û",
                        "gender": "–ú—É–∂—Å–∫–æ–π" –µ—Å–ª–∏ –º—É–∂—á–∏–Ω–∞/–º—É–∂—Å–∫–æ–π, "–ñ–µ–Ω—Å–∫–∏–π" –µ—Å–ª–∏ –∂–µ–Ω—â–∏–Ω–∞/–∂–µ–Ω—Å–∫–∏–π, –∏–Ω–∞—á–µ None,
                        "age": –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º, –∏–Ω–∞—á–µ None,
                        "region": –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω, –∏–Ω–∞—á–µ None,
                        "marital_status": "–•–æ–ª–æ—Å—Ç/–ù–µ –∑–∞–º—É–∂–µ–º" –µ—Å–ª–∏ —É–∞–∑–∞–Ω–æ —á—Ç–æ —Ö–æ–ª–æ—Å—Ç/–æ–¥–∏–Ω/–Ω–µ –∂–µ–Ω–∞—Ç,
                        "children": "0" –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —á—Ç–æ –Ω–µ—Ç –µ—Ç–µ–π,
                        "benefits": "–ù–µ—Ç" –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —á—Ç–æ –Ω–µ—Ç –ø–æ—Å–æ–±–∏–π
                    }
                    """},
                {"role": "user", "content": message.text}
            ]
        )
        
        response_text = response.choices[0].message.content
        response_text = response_text.replace('null', 'None')
        parsed_data = eval(response_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data(**parsed_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        if parsed_data.get('age') is None:
            await state.set_state(Form.waiting_for_age)
            await message.reply("–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ:")
            return
        elif parsed_data.get('region') is None:
            await state.set_state(Form.waiting_for_region)
            await message.reply("–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω —Ä–µ–≥–∏–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä—Ç–µ:", reply_markup=cities_kb)
            return
        elif parsed_data.get('gender') is None:
            await state.set_state(Form.waiting_for_gender)
            await message.reply("–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=gender_kb)
            return
            
        # –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = (
            f"üìã –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\n"
            f"üë§ –§–ò–û: {parsed_data['name']}\n"
            f"‚ö§ –ü–æ–ª: {parsed_data['gender']}\n"
            f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {parsed_data['age']}\n"
            f"üåç –†–µ–≥–∏–æ–Ω: {parsed_data['region']}\n"
            f"üíë –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {parsed_data['marital_status']}\n"
            f"üë∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π: {parsed_data['children']}\n"
            f"üì¶ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å–æ–±–∏—è: {parsed_data['benefits']}"
        )
        
        await bot.send_message(TARGET_GROUP_ID, formatted_message)
        await message.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ–Ω—é —Ñ—É–Ω–∫—Ü–∏–π
        await message.reply(
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:",
            reply_markup=functions_kb
        )
        
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ:
        save_success = await save_user_data_sync(message.from_user.id, parsed_data)
        
        if not save_success:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
    except Exception as e:
        print(f"Error: {e}")
        await message.reply(
            "–ò–∑–≤–∏–Ω–∏–µ, –ø—Ä–æ–∏–∑–æ—à–∞ –æ—à–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

@router.message(Form.waiting_for_gender)
async def process_gender_after_text(message: types.Message, state: FSMContext):
    if message.text not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞.", reply_markup=gender_kb)
        return
        
    await state.update_data(gender=message.text)
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–µ –ø–æ–ª–µ
    if not user_data.get('age'):
        await state.set_state(Form.waiting_for_age)
        await message.reply("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=ReplyKeyboardRemove())
        return
    elif not user_data.get('region'):
        await state.set_state(Form.waiting_for_region)
        await message.reply("–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:", reply_markup=cities_kb)
        return
    # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π ...

@router.message(Form.waiting_for_region)
async def process_region_after_text(message: types.Message, state: FSMContext):
    if message.text not in KAZAKHSTAN_CITIES:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=cities_kb)
        return
    
    try:
        # –ü–æ–ª—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        user_data = await state.get_data()
        
        # –î–æ–±–∞–≤–ª—è–º —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º
        user_data['region'] = message.text
        
        # –°—Ä–∞–∑—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        formatted_message = (
            f"üìã –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\n"
            f"üë§ –§–ò–û: {user_data['name']}\n"
            f"‚ö§ –ü–æ–ª: {user_data['gender']}\n"
            f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
            f"üåç –†–µ–≥–∏–æ–Ω: {user_data['region']}\n"
            f"üíë –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–Ω–∏–µ: {user_data['marital_status']}\n"
            f"üë∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π: {user_data['children']}\n"
            f"üì¶ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å–æ–±–∏—è: {user_data['benefits']}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await bot.send_message(TARGET_GROUP_ID, formatted_message)
        await message.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ç–ø–∞–≤–ª–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())
        await state.clear()  # –í–∞–∂–Ω–æ: –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞
        
    except Exception as e:
        print(f"Error: {e}")
        await message.reply(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

@router.message(Form.waiting_for_age)
async def process_age_after_text(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
        
    age = int(message.text)
    if age < 0 or age > 120:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 0 –¥–æ 120 –ª–µ—Ç).")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    user_data = await state.get_data()
    user_data['age'] = message.text
    
    # –°—Ä–∞–∑—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    formatted_message = (
        f"üìã –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\n"
        f"üë§ –§–ò–û: {user_data['name']}\n"
        f"‚ö§ –ü–æ–ª: {user_data['gender']}\n"
        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
        f"üåç –†–µ–≥–∏–æ–Ω: {user_data['region']}\n"
        f"üíë –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {user_data['marital_status']}\n"
        f"üë∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π: {user_data['children']}\n"
        f"üì¶ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å–æ–±–∏—è: {user_data['benefits']}"
    )
    
    await bot.send_message(TARGET_GROUP_ID, formatted_message)
    await message.reply("–û—Ç–ª–∏—á–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())
    await state.clear()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ–Ω—é —Ñ—É–Ω–∫—Ü–∏
    await message.reply(
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏. –í—ã–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:",
        reply_markup=functions_kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
@router.message(Command("functions"))
async def cmd_functions(message: types.Message):
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:",
        reply_markup=functions_kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
@router.message(lambda message: message.text == "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
async def process_cybersecurity(message: types.Message):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await save_user_request(
            message.from_user.id,
            message.from_user.username,
            "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = await get_gpt_response(
            "–î–∞–π –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–≥—Ä–æ–∑–∞—Ö"
        )
        await message.reply(response)
        
    except Exception as e:
        logging.error(f"Error in process_function: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(lambda message: message.text == "–§–∏–Ω–∞–Ω—Å—ã")
async def process_finance(message: types.Message):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await save_user_request(
            message.from_user.id,
            message.from_user.username,
            "–§–∏–Ω–∞–Ω—Å—ã"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = await get_gpt_response(
            "–î–∞–π –∫—Ä–∞–∫–∏–π –æ–∑–æ—Ä —Ç–µ—É—â–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"
        )
        await message.reply(response)
        
    except Exception as e:
        logging.error(f"Error in process_function: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(lambda message: message.text == "—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
async def process_crypto(message: types.Message):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await save_user_request(
            message.from_user.id,
            message.from_user.username,
            "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = await get_gpt_response(
            "–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"
        )
        await message.reply(response)
        
    except Exception as e:
        logging.error(f"Error in process_function: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(lambda message: message.text == "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
async def process_investments(message: types.Message):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await save_user_request(
            message.from_user.id,
            message.from_user.username,
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = await get_gpt_response(
            "–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤"
        )
        await message.reply(response)
        
    except Exception as e: 
        logging.error(f"Error in process_function: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(lambda message: message.text == "–°—Ç–∞—Ä—Ç–∞–ø—ã")
async def process_startups(message: types.Message):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await save_user_request(
            message.from_user.id,
            message.from_user.username,
            "–°—Ç–∞—Ä—Ç–∞–ø—ã"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = await get_gpt_response(
            "–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Å—Ç–∞—Ä—Ç–∞–ø-—ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
        )
        await message.reply(response)
        
    except Exception as e:
        logging.error(f"Error in process_function: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(lambda message: message.text == "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
async def process_tech(message: types.Message):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await save_user_request(
            message.from_user.id,
            message.from_user.username,
            "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = await get_gpt_response(
            "–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π"
        )
        await message.reply(response)
        
    except Exception as e:
        logging.error(f"Error in process_function: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(lambda message: message.text == "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç")
async def process_ai(message: types.Message):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await save_user_request(
            message.from_user.id,
            message.from_user.username,
            "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = await get_gpt_response(
            "–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò –∏ –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"
        )
        await message.reply(response)
        
    except Exception as e:
        logging.error(f"Error in process_function: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(lambda message: message.text == "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥")
async def process_marketing(message: types.Message):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await save_user_request(
            message.from_user.id,
            message.from_user.username,
            "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = await get_gpt_response(
            "–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Å–æ–≤—Ä–º–µ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ —Ç—Ä–µ–Ω–¥–æ–≤"
        )
        await message.reply(response)
        
    except Exception as e:
        logging.error(f"Error in process_function: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(lambda message: message.text == "–ë–∏–∑–Ω–µ—Å")
async def process_business(message: types.Message):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await save_user_request(
            message.from_user.id,
            message.from_user.username,
            "–ë–∏–∑–Ω–µ—Å"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = await get_gpt_response(
            "–î–∞–π –∫—Ä–∞–∫–∏–π –æ–±–∑–æ—Ä —Ç–µ–∫—É—â–µ–π –±–∏–∑–Ω–µ—Å-—Å—Ä–µ–¥—ã –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
        )
        await message.reply(response)
        
    except Exception as e:
        logging.error(f"Error in process_function: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(lambda message: message.text == "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
async def process_education(message: types.Message):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await save_user_request(
            message.from_user.id,
            message.from_user.username,
            "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response = await get_gpt_response(
            "–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
        )
        await message.reply(response)
        
    except Exception as e:
        logging.error(f"Error in process_function: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT
async def get_gpt_response(prompt: str) -> str:
    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        print(f"GPT Error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

@router.message(Command("menu"))
async def cmd_menu(message: types.Message):
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:",
        reply_markup=functions_kb
    )

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
async def check_next_step(state: FSMContext, message: types.Message):
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –ø–æ –ø–æ—Ä—è–¥–∫—É
    if not user_data.get('marital_status'):
        await state.set_state(Form.waiting_for_marital_status)
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=marital_kb)
        return True
    elif not user_data.get('children'):
        await state.set_state(Form.waiting_for_children)
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:", reply_markup=ReplyKeyboardRemove())
        return True
    elif not user_data.get('benefits'):
        await state.set_state(Form.waiting_for_benefits)
        await message.reply("–ü–æ–ª—É—á–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å–æ–±–∏—è?", reply_markup=benefits_kb)
        return True
    
    # –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await complete_registration(message, state, user_data)
    return False

# –î–æ–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def complete_registration(message: types.Message, state: FSMContext, user_data: dict):
    formatted_message = (
        f"üìã –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\n"
        f"üë§ –§–ò–û: {user_data['name']}\n"
        f"‚ö§ –ü–æ–ª: {user_data['gender']}\n"
        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
        f"üåç –†–µ–≥–∏–Ω: {user_data['region']}\n"
        f"üíë –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {user_data['marital_status']}\n"
        f"üë∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π: {user_data['children']}\n"
        f"üì¶ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å–æ–±–∏—è: {user_data['benefits']}"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    save_success = await save_user_data_sync(message.from_user.id, user_data)
    
    if not save_success:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    await bot.send_message(TARGET_GROUP_ID, formatted_message)
    await message.reply("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())
    await state.clear()
    
    await message.reply(
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:",
        reply_markup=functions_kb
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
def create_quiz_kb(topics):
    keyboard = []
    for topic in topics:
        row = []
        emoji = QUIZ_EMOJIS.get(topic, '‚ùì')
        for points in [50, 100, 150]:
            callback_data = f"quiz:{topic}:{points}"
            row.append(InlineKeyboardButton(
                text=f"{emoji}{points}",
                callback_data=callback_data
            ))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton(
        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="quiz:menu"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è")
async def start_quiz(message: types.Message, state: FSMContext):
    user = await sync_to_async(TelegramUser.objects.get)(user_id=message.from_user.id)
    if not user.used_functions:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É!")
        return
    
    topics = list(user.used_functions)
    topics = topics[:3] if len(topics) > 3 else topics
    
    if not topics:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
    data = await state.get_data()
    used_buttons = data.get('used_buttons', [])
    correct_answers = data.get('correct_answers', [])  # –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã
    all_questions = sum(1 for t in topics for _ in range(3))  # 3 –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –∫–∞–∂–¥—É—é —Ç–µ–º—É
    if len(used_buttons) >= all_questions:
        await message.reply(
            f"üéì –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!\n"
            f"üí´ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –æ—á–∫–∏: {user.quiz_points}\n"
            f"üëã –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!"
        )
        return

    # –û—á–∏—â–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∫–≤–∏–∑–∞
    await state.update_data(
        available_topics=topics,
        used_buttons=used_buttons,
        correct_answers=correct_answers
    )
    
    topics_text = "\n".join([f"{QUIZ_EMOJIS.get(topic, '‚ùì')} {topic}" for topic in topics])
    quiz_message = await message.reply(
        f"<b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞!</b>\n\n"
        f"üéØ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –æ—á–∫–∏: {user.quiz_points}\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:\n{topics_text}\n\n"
        f"–í—ã–±–∏—Ä–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:",
        reply_markup=create_quiz_kb(topics, used_buttons, correct_answers),
        parse_mode="HTML"
    )
    
    await state.update_data(quiz_messages=[quiz_message.message_id])

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_quiz_kb(topics, used_buttons, correct_answers):
    keyboard = []
    for t in topics:
        row = []
        for p in [50, 100, 150]:
            button_id = f"{t}:{p}"
            if button_id in used_buttons:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ‚úÖ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ ‚ùå –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
                text = "‚úÖ" if button_id in correct_answers else "‚ùå"
                row.append(InlineKeyboardButton(text=text, callback_data=f"quiz:used:{t}:{p}"))
            else:
                emoji = QUIZ_EMOJIS.get(t, '‚ùì')
                row.append(InlineKeyboardButton(text=f"{emoji}{p}", callback_data=f"quiz:{t}:{p}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="quiz:menu")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å—ã
@router.poll_answer()
async def handle_poll_answer(poll_answer: types.PollAnswer, state: FSMContext):
    try:
        user = await sync_to_async(TelegramUser.objects.get)(user_id=poll_answer.user.id)
        data = await state.get_data()
        
        if not data.get('current_question'):
            return
        
        question_data = data['current_question']
        points = question_data['points']
        correct_answer = data.get('correct_answer', '')
        explanation = data.get('explanation', '')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        used_buttons = data.get('used_buttons', [])
        correct_answers = data.get('correct_answers', [])
        current_button = f"{question_data['topic']}:{points}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏
        if poll_answer.option_ids[0] == 0:
            user.quiz_points += points
            correct_answers.append(current_button)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            response_text = (
                f"üéâ <b>–í–µ—Ä–Ω–æ!</b>\n"
                f"–¢–µ–∫—É—â–∏–µ –æ—á–∫–∏: {user.quiz_points}\n\n"
                f"{explanation}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:"
            )
        else:
            user.quiz_points -= points
            response_text = (
                f"üò¢ <b>–ù–µ–≤–µ—Ä–Ω–æ</b>\n"
                f"–¢–µ–∫—É—â–∏–µ –æ—á–∫–∏: {user.quiz_points}\n\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n"
                f"{explanation}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:"
            )
        
        await sync_to_async(user.save)()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã
        topics = data.get('available_topics', [])
        all_questions = sum(1 for t in topics for _ in range(3))
        if len(used_buttons) >= all_questions:
            response_text = (
                f"üéì –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!\n"
                f"üí´ –í–∞—à–∏ –∏—Ç–æ–≥–æ–≤—ã–µ –æ—á–∫–∏: {user.quiz_points}\n"
                f"üëã –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!"
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            used_buttons=used_buttons,
            correct_answers=correct_answers
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await bot.send_message(
            poll_answer.user.id,
            response_text,
            parse_mode="HTML",
            reply_markup=create_quiz_kb(topics, used_buttons, correct_answers)
        )

    except Exception as e:
        logging.error(f"Error in handle_poll_answer: {e}")
        await bot.send_message(
            poll_answer.user.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞."
        )

@router.callback_query(lambda c: c.data.startswith('quiz:'))
async def process_quiz_callback(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await callback_query.answer()
        
        action = callback_query.data.split(':')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        if action[1] == "used":
            await callback_query.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!", show_alert=True)
            return
            
        if action[1] == "menu":
            await state.clear()
            await callback_query.message.delete()
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:",
                reply_markup=functions_kb
            )
            return
        
        topic = action[1]
        points = int(action[2])
        
        data = await state.get_data()
        used_buttons = data.get('used_buttons', [])
        
        if f"{topic}:{points}" in used_buttons:
            await callback_query.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!")
            return
            
        question, correct, wrong1, wrong2, wrong3 = await get_quiz_question(topic, state)
        
        poll = await callback_query.message.answer_poll(
            question=f"–í–æ–ø—Ä–æ—Å –Ω–∞ —Ç–µ–º—É \"{topic}\" –∑–∞ {points} –æ—á–∫–æ–≤\n\n{question}",
            options=[correct, wrong1, wrong2, wrong3],
            type='quiz',
            correct_option_id=0,
            is_anonymous=False
        )
        
        used_buttons.append(f"{topic}:{points}")
        await state.update_data(
            used_buttons=used_buttons,
            current_question={'topic': topic, 'points': points, 'poll_id': poll.poll.id}
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        topics = data.get('available_topics', [])
        new_keyboard = []
        for t in topics:
            row = []
            for p in [50, 100, 150]:
                if f"{t}:{p}" in used_buttons:
                    row.append(InlineKeyboardButton(text="‚ùå", callback_data=f"quiz:used:{t}:{p}"))
                else:
                    emoji = QUIZ_EMOJIS.get(t, '‚ùì')
                    row.append(InlineKeyboardButton(text=f"{emoji}{p}", callback_data=f"quiz:{t}:{p}"))
            new_keyboard.append(row)
        
        new_keyboard.append([InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="quiz:menu")])
        
        await callback_query.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(inline_keyboard=new_keyboard)
        )
        
    except Exception as e:
        logging.error(f"Error in process_quiz_callback: {e}")
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

@router.callback_query(lambda c: c.data.startswith('quiz:used:'))
async def process_used_button(callback_query: types.CallbackQuery):
    await callback_query.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!", show_alert=True)

async def get_quiz_question(topic: str, state: FSMContext) -> tuple:
    try:
        system_prompt = """–¢—ã —Å–æ–∑–¥–∞–µ—à—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. 
        –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º, –∞ –Ω–µ placeholder.
        –ü–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω—É–∂–Ω–æ –¥–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.
        
        –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:
        –ö–∞–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–≤–æ–π?|Bitcoin|Ethereum|Litecoin|Dogecoin|Bitcoin –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ 2009 –≥–æ–¥—É –°–∞—Ç–æ—à–∏ –ù–∞–∫–∞–º–æ—Ç–æ –∏ —Å—Ç–∞–ª –ø–µ—Ä–≤–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –≤ –º–∏—Ä–µ.
        
        –¢–≤–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É:
        –í–û–ü–†–û–°|–ü–†–ê–í–ò–õ–¨–ù–´–ô_–û–¢–í–ï–¢|–ù–ï–í–ï–†–ù–´–ô_–û–¢–í–ï–¢_1|–ù–ï–í–ï–†–ù–´–ô_–û–¢–í–ï–¢_2|–ù–ï–í–ï–†–ù–´–ô_–û–¢–í–ï–¢_3|–û–ë–™–Ø–°–ù–ï–ù–ò–ï
        
        –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞."""
        
        user_prompt = f"–°–æ–∑–¥–∞–π –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å —Å 4 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–º–µ {topic}. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–º—É —Å–∏–º–≤–æ–ª–∞–º–∏ |"
        
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.7
        )
        
        raw_response = response.choices[0].message.content.strip()
        parts = [part.strip() for part in raw_response.split('|')]
        
        if len(parts) != 6:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT")
        
        question, correct, wrong1, wrong2, wrong3, explanation = parts
        
        await state.update_data({
            'correct_answer': correct,
            'explanation': explanation
        })
        
        return (question, correct, wrong1, wrong2, wrong3)
        
    except Exception as e:
        logging.error(f"GPT Quiz Error: {e}")
        return (
            f"–ß—Ç–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–º–µ {topic}?",
            f"–û—Å–Ω–æ–≤–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç {topic}",
            f"–ù–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ {topic}",
            f"–°–æ–≤—Å–µ–º –¥—Ä—É–≥–∞—è —Ç–µ–º–∞",
            f"–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
@router.message(lambda message: message.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def show_profile(message: types.Message):
    try:
        user = await sync_to_async(TelegramUser.objects.get)(user_id=message.from_user.id)
        
        profile_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"–§–ò–û: {user.full_name or '–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ü–æ–ª: {user.gender or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {user.age or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–†–µ–≥–∏–æ–Ω: {user.region or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {user.marital_status or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π: {user.children or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å–æ–±–∏—è: {user.benefits or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"üéØ –ù–∞–±—Ä–∞–Ω–æ –æ—á–∫–æ–≤ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ: {user.quiz_points}\n"
            f"üìö –ò–∑—É—á–µ–Ω–Ω—ã–µ —Ç–µ–º—ã: {', '.join(user.used_functions) if user.used_functions else '–ù–µ—Ç'}"
        )
        
        await message.answer(profile_text, reply_markup=profile_kb, parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"Error in show_profile: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
@router.callback_query(lambda c: c.data.startswith('profile:'))
async def process_profile_callback(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data.split(':')[1]
    
    if action == "menu":
        await callback_query.message.delete()
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É:", reply_markup=functions_kb)
    elif action == "edit":
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=edit_kb
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith('edit:'))
async def process_edit_callback(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        field = callback_query.data.split(':')[1]
        
        if field == "back":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é
            await show_profile(callback_query.message)
            return
            
        field_names = {
            "full_name": "–§–ò–û",
            "age": "–≤–æ–∑—Ä–∞—Å—Ç",
            "region": "—Ä–µ–≥–∏–æ–Ω",
            "marital_status": "—Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ",
            "children": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π",
            "benefits": "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å–æ–±–∏—è"
        }
        
        await state.update_data(editing_field=field)
        await state.set_state(Form.editing_field)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
        keyboard = None
        if field == "marital_status":
            keyboard = marital_kb
        elif field == "benefits":
            keyboard = benefits_kb
        elif field == "region":
            keyboard = cities_kb
            
        await callback_query.message.edit_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_names[field]}':",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logging.error(f"Error in process_edit_callback: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@router.message(Form.editing_field)
async def process_edit_value(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        field = data['editing_field']
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if field == "age" and not message.text.isdigit():
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
            return
            
        user = await sync_to_async(TelegramUser.objects.get)(user_id=message.from_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
        setattr(user, field, message.text)
        await sync_to_async(user.save)()
        
        await state.clear()
        await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await show_profile(message)
        
    except Exception as e:
        logging.error(f"Error in process_edit_value: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
@router.message(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def start_user_search(message: types.Message, state: FSMContext):
    await state.set_state(Form.waiting_for_user_search)
    await message.reply(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
API_BASE_URL = 'http://127.0.0.1:8000/'
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
@router.message(Form.waiting_for_user_search)
async def process_user_search(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.reply(
            "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=functions_kb
        )
        return

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                urljoin(API_BASE_URL, 'api/get_user_data/'),
                json={'query': message.text}
            ) as response:
                result = await response.json()
                
                if result['status'] == 'success':
                    user_data = result['data']
                    response_text = (
                        f"üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
                        f"üÜî ID: {user_data['user_id']}\n"
                        f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data['username']}\n"
                        f"üìù –§–ò–û: {user_data['full_name']}\n"
                        f"‚ö§ –ü–æ–ª: {user_data['gender']}\n"
                        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
                        f"üåç –†–µ–≥–∏–æ–Ω: {user_data['region']}\n"
                        f"üíë –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {user_data['marital_status']}\n"
                        f"üë∂ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π: {user_data['children']}\n"
                        f"üì¶ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å–æ–±–∏—è: {user_data['benefits']}\n"
                        f"üéØ –û—á–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {user_data['quiz_points']}\n"
                        f"üìö –ò–∑—É—á–µ–Ω–Ω—ã–µ —Ç–µ–º—ã: {', '.join(user_data['used_functions'])}\n"
                        f"‚è± –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data['last_activity']}"
                    )
                else:
                    response_text = f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                
                await message.reply(response_text, reply_markup=functions_kb)
                await state.clear()
                
    except Exception as e:
        logging.error(f"Error in user search: {e}")
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=functions_kb
        )
        await state.clear()

async def main():
    # –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
